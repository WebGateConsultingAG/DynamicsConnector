name: SonarCloud

on:
  push:
    branches:
      - develop
  pull_request:
    branches:
      - develop

jobs:
  build:
    name: Build and Analyze
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0  # SonarCloud scanner needs the full history to determine changed lines
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: 6.0.x
  
    - name: Install SonarScanner for .NET
      run: dotnet tool install --global dotnet-sonarscanner
    
    - name: Begin SonarCloud Analysis
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed for automatic PR decoration
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      run: |
        dotnet sonarscanner begin /k:"WGCDynamics" /o:"webgateconsultingag-azure" /d:sonar.login="${SONAR_TOKEN}" /d:sonar.host.url="https://sonarcloud.io" /d:sonar.cs.opencover.reportsPaths="**/coverage.opencover.xml" /d:sonar.exclusions="**/Migrations/**" /d:sonar.coverage.exclusions="**Tests*.cs"
        # Adjust the above command with your project key, organization, and any other relevant parameters for your project
    
    - name: Build
      run: dotnet build

    - name: Create test.runsettings
      run: |
        cat > WGCDynamics.Integrationstests/test.runsettings <<EOF
        <RunSettings>
          <TestRunParameters>
          ${{ secrets.TEST_PARAMETER }}
          </TestRunParameters>
        </RunSettings>
        EOF
    
    - name: Test and collect coverage
      run: |
        # Your commands to run tests and collect coverage, for example:
        dotnet test /p:CollectCoverage=true /p:CoverletOutputFormat=opencover
        # This example assumes you're using coverlet for code coverage in a .NET Core project
    
    - name: End SonarCloud Analysis
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      run: |
        dotnet sonarscanner end /d:sonar.login="${SONAR_TOKEN}"